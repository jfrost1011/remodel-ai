---
description: Follow these project rules
globs: 
---

# RemodelAI Project Rules for CursorAI

## CRITICAL RULES - DO NOT VIOLATE

### Frontend Preservation
- **NEVER** modify the frontend UI/UX from V0 export
- **DO NOT** suggest UI improvements or changes
- **DO NOT** alter styles, components, or layouts
- **ONLY** modify API endpoint connections and data fetching

### Geographic Restrictions
- **ENFORCE** California-only service
- **LIMIT** cost estimates to San Diego and Los Angeles only
- **REJECT** all other location requests with: "We're not available in [location] yet, but we're expanding soon!"
- **VALIDATE** location at multiple levels (frontend, schema, backend)

### Topic Boundaries
- **RESTRICT** to residential construction topics only
- **REJECT** all non-construction queries
- **RESPOND** to off-topic with: "I'm specifically trained in California residential construction. How can I help with your construction project?"
- **ENFORCE** in chat_service.py with strict validation

## Implementation Standards

### Python Code
- Follow PEP 8 strictly
- Use type hints for all functions
- Add comprehensive docstrings
- Implement error handling on all external calls

### API Design
- Follow RESTful principles
- Use proper HTTP status codes
- Return consistent error formats
- Validate all inputs with Pydantic

### Security
- Never expose API keys in code
- Use environment variables for secrets
- Implement input sanitization
- Add rate limiting to endpoints

## Service Implementation Rules

### RAG Service
- Use exact system prompt provided in PRD
- Implement topic filtering before processing
- Add confidence scores to all estimates
- Cache embeddings for performance

### Chat Service
- Validate construction scope first
- Check geographic constraints second
- Maintain session state properly
- Log all rejected queries

### Estimate Service
- Enforce SD/LA restriction
- Apply 12% LA pricing adjustment
- Use 40/35/5/20 cost breakdown
- Always return confidence scores

### PDF Service
- Generate professional layouts
- Include all required sections
- Add 30-day validity notice
- Handle large data gracefully

## Testing Requirements

### Unit Tests
- Test all validators
- Mock external APIs
- Verify error handling
- Check edge cases

### Integration Tests
- Test full API flows
- Verify PDF generation
- Check session management
- Test rate limiting

## Deployment Rules

### Environment Variables
Required variables:
- OPENAI_API_KEY
- PINECONE_API_KEY
- PINECONE_INDEX
- FRONTEND_URL

### Vercel Configuration
- Use Python 3.9+ runtime
- Configure proper routes
- Set up environment variables
- Enable CORS properly

## Code Review Checklist

Before considering any code complete:
1. ✓ Frontend remains unchanged (except API calls)
2. ✓ Geographic restrictions enforced
3. ✓ Topic filtering implemented
4. ✓ All endpoints tested
5. ✓ Error handling comprehensive
6. ✓ Security measures in place
7. ✓ Performance optimized
8. ✓ Documentation updated

## Common Mistakes to Avoid

1. **DON'T** suggest frontend improvements
2. **DON'T** allow non-CA locations
3. **DON'T** respond to off-topic queries
4. **DON'T** expose sensitive data
5. **DON'T** skip validation steps
6. **DON'T** forget error handling
7. **DON'T** ignore performance
8. **DON'T** bypass security measures

## Expected Behavior Examples

### Valid Query
User: "How much does a kitchen remodel cost in San Diego?"
Response: Detailed estimate with breakdown

### Invalid Location
User: "What's the cost for a bathroom remodel in Phoenix?"
Response: "We're not available in Phoenix yet, but we're expanding soon!"

### Off-Topic Query
User: "What's the weather today?"
Response: "I'm specifically trained in California residential construction. How can I help with your construction project?"

## Final Notes

- Always prioritize user data security
- Maintain professional responses
- Follow the PRD specifications exactly
- Test thoroughly before deployment
- Document any assumptions made
- Ask for clarification if needed
